
/*pending
---
title: No JavaScript
name: no_js
categories:
  - All
  - JavaScript
  - Utilities
---
### Javascript

Try disabling js and rendering this page.

```haml_example
%h3.invisible-no-js Won't show if browser doesn't support JS.
```

*/

.no-js .invisible-no-js {
  visibility: hidden;
}



[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
  display: none !important;
}

/*doc
---
title: Responsive Utilities
name: responsive_utilities
categories:
  - All
  - Utilities
---

Use a single or combination of the available classes for toggling content across viewport breakpoints.

<table class="styleguide">
  <thead>
    <tr>
      <th></th>
      <th>
        Extra small devices
        <small>Phones (&lt;768px)</small>
      </th>
      <th>
        Small devices
        <small>Tablets (&geq;768px)</small>
      </th>
      <th>
        Medium devices
        <small>Desktops (&geq;992px)</small>
      </th>
      <th>
        Large devices
        <small>Desktops (&geq;1200px)</small>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.visible-xs-*</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-sm-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-md-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.visible-lg-*</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.hidden-xs</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-sm</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-md</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.hidden-lg</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>


The `.visible-*-*` classes for each breakpoint come in three variations, one for each CSS display property value listed below.

<table class="styleguide">
  <thead>
    <tr>
      <th>Group of classes</th>
      <th>CSS display</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-wrap"><code>.visible-*-block</code></td>
      <td class="no-wrap"><code>display: block;</code></td>
    </tr>
    <tr>
      <td class="no-wrap"><code>.visible-*-inline</code></td>
      <td class="no-wrap"><code>display: inline;</code></td>
    </tr>
    <tr>
      <td class="no-wrap"><code>.visible-*-inline-block</code></td>
      <td class="no-wrap"><code>display: inline-block;</code></td>
    </tr>
  </tbody>
</table>

So, for extra small (`xs`) screens for example, the available `.visible-*-*` classes are:

- `.visible-xs-block`
- `.visible-xs-inline`
- `.visible-xs-inline-block`

*/

/*doc
---
title: Print
name: print
categories:
  - All
  - Utilities
---

Similar to the regular responsive classes, use these for toggling content for print.

<table class="styleguide">
  <thead>
    <tr>
      <th>Classes</th>
      <th>Browser</th>
      <th>Print</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>
        <code>.visible-print-block</code><br>
        <code>.visible-print-inline</code><br>
        <code>.visible-print-inline-block</code>
      </th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th><code>.hidden-print</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>


*/

/*doc
---
title: Vertical Align
name: vertical_align
categories:
  - All
  - Layout
---

The Aligner allows you to vertically align children to the top, center, or bottom.
Its height is set by default to 230px.

This component doesn't do any horizontal alignment.
You can use grids, or the [text-alignment classes](/utilities.html#alignment)
`.txt-l`, `.txt-r`, and `.txt-c` with this component.

<div class="alert alert-warning">
  <p>
    This component is not supported in IE10 and below.
    While the content will appear, it will not be vertically aligned.
  </p>
</div>

```html_example
<div class="aligner txt-c">
  <a class="aligner-item" href="http://bitly.com/ZTHUDU">Centered content</a>
</div>
```

Override the default height by setting an inline style like so:

```html_example
<div class="aligner" style="height: 200px;">
  <a class="aligner-item aligner-item-top" href="http://bit.ly/1wCDWdC">On Top</a>
  <a class="aligner-item" href="http://bitly.com/ZTHUDU">Center</a>
  <a class="aligner-item aligner-item-bottom" href="http://bit.ly/12TqYiL">Bottom</a>
</div>
```

Note: the background colors in the example are just for display in the styleguide.

*/

.aligner {
  height: 230px;
  display: flex;
  flex-flow: row wrap;
  align-items: center;

  .aligner-item {
    flex: 0 100%;

    &.aligner-item-top {
      align-self: flex-start;
    }

    &.aligner-item-bottom {
      align-self: flex-end;
    }
  }
}
